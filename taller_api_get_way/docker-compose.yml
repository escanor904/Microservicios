version: "3.8"

services:

  zookeeper:  #administra el closter
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000


  kafka:
    restart: always
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  db_GP:
     image: postgres:latest
     restart: always
     ports:
       -  5433:5432
     environment:
        POSTGRES_DB: profile_db
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: admin_password
        POSTGRES_HOST_AUTH_METHOD: trust
        
     volumes:
            
      #como el docker-compose esta dentro de la capeta taller_api_get_way usamos ./inicializar sql que nos lleva directamente al archivo
       - ./inicializar_GP.sql:/docker-entrypoint-initdb.d/inicializar_GP.sql

  db_users:
    image: postgres:latest
    restart: always
    ports:
      -  5434:5432
    environment:
      POSTGRES_DB: authentication_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin_password
      POSTGRES_HOST_AUTH_METHOD: trust
      
    volumes:
      
      - ./inicializar_users.sql:/docker-entrypoint-initdb.d/inicializar_users.sql
    
  logs_db:
    image: postgres:latest
    restart: always
    ports:
      -  5435:5432
    environment:
      POSTGRES_DB: logs_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin_password
      POSTGRES_HOST_AUTH_METHOD: trust
      
    volumes:
      - ./inicializar_logs.sql:/docker-entrypoint-initdb.d/inicializar_logs.sql
    
  consumer:
    container_name: api_logs
    build:
      context: ./consumidor
      dockerfile: Dockerfile
    environment:
      DB_NAME: logs_db
      DB_USER: admin
      POSTGRES_PASSWORD: admin_password
      DATABASE_HOST: logs_db
      DATABASE_PORT: 5432
      KAFKA_TOPIC_NAME: logs-topic
      KAFKA_SERVER: kafka
      KAFKA_PORT: 9092
    ports:
      - 8081:8081
    hostname: logsapp-cont
    restart: always
    depends_on:
      - zookeeper
      - kafka
      - logs_db
  
  api_users:
    container_name: api_users
    build:
      context: ./api_users
      dockerfile: Dockerfile
    environment:
      DB_NAME: authentication_db
      DB_USER: admin
      POSTGRES_PASSWORD: admin_password
      DATABASE_HOST: db_users
      DATABASE_PORT: 5432
      KAFKA_TOPIC_LOGS: logs-topic
      KAFKA_TOPIC_MANAGMENT: managment-topic
      KAFKA_SERVER: kafka
      KAFKA_PORT: 9092
    ports:
      - 5000:5000
    restart: always
    depends_on:
      - db_users
      - zookeeper
      - kafka

  api_profile_managment:
    container_name: api_managment
    build:
      context: ./api_profile_management
      dockerfile: Dockerfile
    environment:
      DB_USER: admin
      POSTGRES_PASSWORD: admin_password
      DATABASE_HOST: db_GP
      DATABASE_PORT: 5432
      DB_NAME: profile_db
      KAFKA_TOPIC_LOGS: logs-topic
      KAFKA_TOPIC_MANAGMENT: managment-topic
      KAFKA_SERVER: kafka
      KAFKA_PORT: 9092
      
    ports:
      - 8080:8080
    restart: always
    depends_on:
      - db_GP
      - zookeeper
      - kafka

  api_gateway:
    container_name: api_gateway
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    restart: always
